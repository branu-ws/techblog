こんにちは。フルスタックエンジニアのミラーです。ブラニューで、RailsとVue.jsで[EAT](start.eat.auto)の開発をしています。

Vue.jsでは複雑でスケーラブルなSPAを作るのに使えますが、従来的なサーバーレンダーされるアプリケーションに動的アクションを付けるのにも便利です。

この記事でRailsアプリケーションにVue.jsでフォームバリデーションをします。

ソースコードはこちらで。https://github.com/lmiller1990/vue-rails-form-validation

`rails new blogger`で新しいRailsアプリケーションを作成します。Vue.jsを`webpacker`で追加するのも可能ですが、この記事でデフォルトのアセットパイプラインで追加します。

`Gemfile`で`vuejs-rails`を追加します。

`gem 'vuejs-rails`

そして`bundle install`。これでVue.jsをアセットパイプラインに追加します。最後に`assets/javascripts/application.js`で：

`//= require vue`

###　コントローラとモデルを作成
アプリケーション作成は簡単です。ただのフォームで`blog`を作ります。`blog`には`title`, `body`があります。コントローラを作ります。

`rails generate controller blogs index create new`

とモデル：

`rails generate model blog title:string body:string`

と、モデルとデータベースをマイグレートします：

`bin/rails db:migrate`

### ロートを追加
`config/routes.rb`を更新します：

```
Rails.application.routes.draw do
  resources :blogs
end
```

### コントローラのアクションを作成

```
class BlogsController < ApplicationController
  def index
    @blogs = Blog.all
  end
  def create    
    @blog = Blog.new(blog_params)    
    if @blog.save!      
      render json: {}, status: :created    
    else      
      return :internal_server_error    
    end  
  end
  def new
    @blog = Blog.new(title: 'Title', body: '')
  end

  private
  def blog_params
    params.require(:blog).permit(:title, :body)
  end
end
```

一般的なRailsのコントローラです。これからVueを使います！

### Viewを作成を作成
コントローラの`new`アクションで定義された`@blog`をViewを作成のフォームに渡さないといけません。`app/views/blogs/new.html.erb`を更新します：

```
<h1>Blogs#new</h1>
<p>Find me in app/views/blogs/new.html.erb</p>
<%= content_tag :div,
  id: 'blog-form-vue',
  data: {
    blog: @blog.to_json(),
  } do %>
<% end %>
```

`content_tag`で`data`に`@blog`を`to_json`で渡します。マークアップを見ると、こうなります：

```
<div 
  id="blog-form-vue" 
  data-blog="{"id": null, "title": "Title", "body": ""}
></div>

https://cdn-images-1.medium.com/max/800/1*mzcXtB19FJ386_JgNHMCGQ.png

### Vueインスタンスを作成
`assets/javascripts/blogs.coffee`を更新します：

```
document.addEventListener 'DOMContentLoaded', () ->
  el = document.getElementById('blog-form-vue')
  blog = JSON.parse(el.dataset.blog)
  csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content')
  
  if el
    new Vue({
      el: el,
        
      data: ->
        blog: blog
```

DOMのレンダーが完了すると、`new.html.erb`で作った`<div id="blog-form-vue"を`document.getElementById('blog-form-vue')`で検証して、`data-blog`を`JSON.parse(el.dataset.blog)`で取ることができます。同時に`CSRF`トークンを取ります。

### バリデーション
Vueの`computed`プロパティーでフォームが正しいか検証できます。問題がなければボタンの`disabled`属性を変えます。`blogs.coffee`を更新します：

```
document.addEventListener 'DOMContentLoaded', () ->
  el = document.getElementById('blog-form-vue')
  
  if el
    blog = JSON.parse(el.dataset.blog)
    csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content')    
  
  new Vue({
      el: el,
      
      data: ->
        blog: blog
        titleError: 'Title has to be at least 5 characters'
        bodyError: 'Body has to be at least 10 characters'
        csrfToken: csrfToken
      computed:        
        valid: ()->
          @blog.title.length > 5 && @blog.body.length > 10
    })
```

そして、フォームも更新します：(`views/blogs/new.html.erb`)。
  <form @submit.prevent="submit">
    <label for="title">Title</label>
    <input v-model="blog.title" id="title">
    <div class="error" v-if="blog.title.length <= 5">
      The title needs to be at least 5 characters.
    </div>
    <label for="blog-body">Body</label>
    <input id="blog-body" v-model="blog.body">
    <div class="error" v-if="blog.body.length <= 10">
      The body needs to be at least 10 characters.
    </div>
    <input 
      type="submit" 
      value="Create blog" 
      :disabled="!valid"
    >
  </form>
<% end %>
<style>
label, input {
  display: block;
} 
.error {
  margin: 5px 0px 10px 10px;
}
input[type="submit"] {
  margin: 10px;
}
</style>
```

面白い点：
- `disabled`属性にバインドして、フォームを検証して問題があれば自動的に`disabled=true`：`:disabled="!valid"`。
- `v-model`でブログの`title`, `body`でバインドします。
- `@submit.prevent="submit"`でフォームを送信します。これから`submit`を書きます。ページを同期に送信します。
- `v-if`

https://cdn-images-1.medium.com/max/800/1*ewA3RABqTEE8FFTxePERiQ.png

### フォームを送信します
`blogs.coffee`で`submit`メソッドを追加します。

```
methods:
  buildRequest: ()->
    headers = new Headers()
    headers.append('Content-Type', 'application/json')     
    headers.append('X-Requested-With', 'XMLHttpRequest')
    headers.append('X-CSRF-TOKEN', @csrfToken)
    new Request('/blogs', {
      headers: headers,
      method: 'POST',  
      credentials: 'same-origin',
      body: JSON.stringify({ title: @blog.title, body: @blog.body })
  })
  submit: ()->
    window.fetch @buildRequest()
      .then (data) ->             
        if data.status == 201
          window.location.href = '/blogs'
```

`fetch`でフォームを同期的に送信します。必要なヘッダーを追加しないと送信できません。`body`を`JSON.stringify`しないと`Object [object]`のままで送信されてしまします。

問題がなければ、201レスポンスがコントローラから戻って、`index`に飛ばします。

`views/blogs/index.html.erb`で全てのブログを表示します：

```
<h1>Blogs#index</h1>
<p>Find me in app/views/blogs/index.html.erb</p> 
<ul> 
  <% @blogs.each do |blog| %> 
    <li>Title: <%= blog.title %> body: <%= blog.body %></li> 
  <% end %>
</ul>
```

https://cdn-images-1.medium.com/max/800/1*q1k6OnSzkwV7r2gLoozj5w.png

### まとめ
Vue.jsをSPAによく使いますが、伝統的なサーバーアプリにも使うことも便利です。今後の記事でVue.jsをwebpackでバンドルしてアプリケーションを作成してみます。

ソースコードはこちらで。https://github.com/lmiller1990/vue-rails-form-validation
